import time
import logging
import os
from pathlib import Path
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Poll
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, PollAnswerHandler, JobQueue
from datetime import datetime, time as dt_time
from dotenv import load_dotenv
import openpyxl
from openpyxl.styles import PatternFill
from openpyxl import Workbook, load_workbook
import csv
from datetime import datetime, timezone
import random


# Load environment variables
load_dotenv(dotenv_path=Path('.') / 'trafee.env')

# Timer for quiz
QUIZ_TIMEOUT_SECONDS = 15

# Global mapping of usernames to chat IDs
user_chat_mapping = {}
poll_participants = {}  # poll_id -> set(user_id)
user_participation = {} # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ä—Ç
quiz_participation= {} # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –£—á–∞—Å—Ç–∏—è –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ
notified_winners_global = set()

# –°–ø–∏—Å–æ–∫ –ø—Ä–∏–∑–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
prizes = [
    "üéÅ –°–µ–≥–æ–¥–Ω—è —Ä–∞–∑—ã–≥—Ä—ã–≤–∞–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ Spotify Premium –Ω–∞ 1 –º–µ—Å—è—Ü!",
    "üéÅ –°–µ–≥–æ–¥–Ω—è —Ä–∞–∑—ã–≥—Ä—ã–≤–∞–µ—Ç—Å—è –ø–æ–¥–∞—Ä–æ—á–Ω–∞—è –∫–∞—Ä—Ç–∞ Amazon –Ω–∞ $20!",
    "üéÅ –°–µ–≥–æ–¥–Ω—è —Ä–∞–∑—ã–≥—Ä—ã–≤–∞–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ Netflix –Ω–∞ 1 –º–µ—Å—è—Ü!",
    "üéÅ –°–µ–≥–æ–¥–Ω—è —Ä–∞–∑—ã–≥—Ä—ã–≤–∞–µ—Ç—Å—è —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –º–µ—Ä—á –æ—Ç –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏!",
    "üéÅ –°–µ–≥–æ–¥–Ω—è —Ä–∞–∑—ã–≥—Ä—ã–≤–∞–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ YouTube Premium –Ω–∞ 1 –º–µ—Å—è—Ü!",
    "üéÅ –°–µ–≥–æ–¥–Ω—è —Ä–∞–∑—ã–≥—Ä—ã–≤–∞–µ—Ç—Å—è –∫–Ω–∏–≥–∞-–±–µ—Å—Ç—Å–µ–ª–ª–µ—Ä –≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ!",
    "üéÅ –°–µ–≥–æ–¥–Ω—è —Ä–∞–∑—ã–≥—Ä—ã–≤–∞–µ—Ç—Å—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É –µ–¥—ã –Ω–∞ $15!"
]

# Function to update chat ID mapping
def update_user_chat_mapping(username, chat_id):
    if username and chat_id:
        user_chat_mapping[username] = chat_id

def get_chat_id_by_username(username):
    return user_chat_mapping.get(username)

# Function to load authorized usernames from CSV
def load_authorized_usernames(file_path):
    usernames = []
    try:
        with open(file_path, mode="r", encoding="utf-8") as file:
            reader = csv.DictReader(file)
            for row in reader:
                if "Telegram Username" in row:
                    usernames.append(row["Telegram Username"])
    except FileNotFoundError:
        logging.warning(f"‚ö†Ô∏è File {file_path} not found. Authorized user list will be empty.")
    except Exception as e:
        logging.error(f"‚ö†Ô∏è Error reading file {file_path}: {e}")
    return usernames

# Configuration for users and admins
csv_file_path = "registration_log.csv"
authorized_usernames = load_authorized_usernames(csv_file_path)
SUPERADMIN_USERNAME = "Alexander_Dym"
file_path = "updated_bot_list.xlsx"

# Initialize the Excel file
def initialize_excel():
    if not os.path.exists(file_path):
        wb = Workbook()
        for i in range(1, 8):
            sheet = wb.create_sheet(title=f"Day {i}")
            headers = ["User ID", "Username", "Response Time", "Correct Answer"]
            sheet.append(headers)
        wb.remove(wb["Sheet"])
        wb.save(file_path)
        logging.info(f"Excel file initialized with sheets for each quiz day at {file_path}")

# Class for quiz questions
class QuizQuestion:
    def __init__(self, question="", answers=None, correct_answer=""):
        self.question = question
        self.answers = answers if answers is not None else []
        self.correct_answer = correct_answer
        self.correct_answer_position = self.__get_correct_answer_position__()

    def __get_correct_answer_position__(self):
        for index, answer in enumerate(self.answers):
            if answer.strip().lower() == self.correct_answer.strip().lower():
                return index
        return -1

# Quiz questions for 7 days
quiz_questions = [
    QuizQuestion("Which of these is a popular affiliate marketing model?", ["Cost per click (CPC)", "Cost per lead (CPL)", "Pay per hire (PPH)"], "Cost per lead (CPL)"),
    QuizQuestion("–ö–∞–∫–∞—è —Å—Ç–æ–ª–∏—Ü–∞ –§—Ä–∞–Ω—Ü–∏–∏?", ["–õ–æ–Ω–¥–æ–Ω", "–ë–µ—Ä–ª–∏–Ω", "–ü–∞—Ä–∏–∂"], "–ü–∞—Ä–∏–∂"),
    QuizQuestion("–°–∫–æ–ª—å–∫–æ –ø–ª–∞–Ω–µ—Ç –≤ –°–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ?", ["7", "8", "9"], "8"),
    QuizQuestion("–ö–∞–∫–æ–µ —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ –Ω–∞ –∑–µ–º–ª–µ?", ["–°–ª–æ–Ω", "–°–∏–Ω–∏–π –∫–∏—Ç", "–ñ–∏—Ä–∞—Ñ"], "–°–∏–Ω–∏–π –∫–∏—Ç"),
    QuizQuestion("–°–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –≤ –æ–¥–Ω–æ–π –º–∏–Ω—É—Ç–µ?", ["60", "100", "120"], "60"),
    QuizQuestion("–ö–∞–∫–æ–π —ç–ª–µ–º–µ–Ω—Ç –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç—Å—è —Å–∏–º–≤–æ–ª–æ–º O?", ["–ö–∏—Å–ª–æ—Ä–æ–¥", "–í–æ–¥–æ—Ä–æ–¥", "–ê–∑–æ—Ç"], "–ö–∏—Å–ª–æ—Ä–æ–¥"),
    QuizQuestion("–ö—Ç–æ —è–≤–ª—è–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —Ç–µ–æ—Ä–∏–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏?", ["–ù—å—é—Ç–æ–Ω", "–≠–π–Ω—à—Ç–µ–π–Ω", "–ì–∞–ª–∏–ª–µ–π"], "–≠–π–Ω—à—Ç–µ–π–Ω"),
]

# Record user response in Excel
def record_user_response(user_id, username, day, response_time, result):
    wb = load_workbook(file_path)
    sheet_name = f"Day {day + 1}"

    if sheet_name not in wb.sheetnames:
        wb.create_sheet(title=sheet_name)
    sheet = wb[sheet_name]

    green_fill = PatternFill(start_color="00FF00", end_color="00FF00", fill_type="solid")
    red_fill = PatternFill(start_color="FF0000", end_color="FF0000", fill_type="solid")
    result_text = "–í–µ—Ä–Ω–æ" if result else "–ù–µ–≤–µ—Ä–Ω–æ"
    result_fill = green_fill if result else red_fill

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_found = False
    for row in sheet.iter_rows(min_row=2, max_row=sheet.max_row):
        if row[0].value == user_id:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ user_id
            row[2].value = response_time  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
            row[3].value = result_text  # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            row[3].fill = result_fill  # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç
            user_found = True
            break

    if not user_found:
        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
        new_row = [user_id, username, response_time, result_text]
        sheet.append(new_row)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç –∑–∞–ª–∏–≤–∫–∏ –∫ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
        for cell in sheet.iter_rows(min_row=sheet.max_row, max_row=sheet.max_row, min_col=1, max_col=4):
            if cell[3].value == "–í–µ—Ä–Ω–æ":
                cell[3].fill = green_fill
            elif cell[3].value == "–ù–µ–≤–µ—Ä–Ω–æ":
                cell[3].fill = red_fill

    wb.save(file_path)
    logging.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} –∑–∞–ø–∏—Å–∞–Ω: {result_text}")




# Command for superadmin to get the results file
def list_handler(update, context):
    user = update.message.from_user

    if user.username == SUPERADMIN_USERNAME:
        try:
            with open(file_path, 'rb') as file:
                context.bot.send_document(chat_id=update.effective_chat.id, document=file, filename="quiz_results.xlsx")
                update.message.reply_text("Here are the current quiz results.")
        except Exception as e:
            update.message.reply_text(f"Failed to send the file: {str(e)}")
    else:
        update.message.reply_text("‚õî You don't have access to this command.")

# Command to start the quiz for the user
def start_command_handler(update, context):
    user = update.effective_user
    chat_id = update.effective_chat.id
    username = user.username if user.username else "Unknown"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—Å–∫–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –±–æ—Ç–∞
    if username in user_participation:
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫
        logging.warning(f"{datetime.now()} - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –ø—ã—Ç–∞–ª—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞–∂–∞—Ç—å /start.")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        context.bot.send_message(
            chat_id=chat_id,
            text="–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ. –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –±—É–¥–µ—Ç –∑–∞–≤—Ç—Ä–∞! –ù–µ —à–∞–ª–∏—Ç–µ üòú."
        )
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Å–ª–æ–≤–∞—Ä—å
    user_participation[username] = {"participated": True, "timestamp": datetime.now()}
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    update_user_chat_mapping(username, chat_id)
    image_url = "https://mailer.ucliq.com/wizz/frontend/assets/files/customer/kd629xy3hj208/img/girl-wearing-santa-s-hat-%281%29.jpg"
    welcome_text = (
        "üéÑüéÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –Ω–∞—à –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à –æ—Ç 17 –ø–æ 24 –¥–µ–∫–∞–±—Ä—è üéÖüéÑ\n\n"
        "‚ú® –ú—ã –±—É–¥–µ–º –∑–∞–¥–∞–≤–∞—Ç—å –≤–∞–º –≤–æ–ø—Ä–æ—Å—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –∏ —Ä–∞–∑—ã–≥—Ä—ã–≤–∞—Ç—å –ø—Ä–∏–∑—ã —Å—Ä–µ–¥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
        "üéÅ –ì–ª–∞–≤–Ω—ã–π –ø—Ä–∏–∑ ‚Äî —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ –≤ –∫–∞–Ω—É–Ω –†–æ–∂–¥–µ—Å—Ç–≤–∞\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ –∏ –≤—ã–∏–≥—Ä–∞—Ç—å üéâ"
    )
    context.bot.send_photo(chat_id=chat_id, photo=image_url, caption=welcome_text)

    keyboard = [[InlineKeyboardButton("üìù –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ", callback_data="participate")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    context.bot.send_message(chat_id=chat_id, text="–ù–∞–∂–º–∏—Ç–µ '–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.", reply_markup=reply_markup)


def handle_poll_timeout(context):
    poll_id = context.job.context['poll_id']
    day = context.job.context['day']

    # –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏
    answered_users = poll_participants.get(poll_id, set())

    # –ó–∞–≥—Ä—É–∂–∞–µ–º Excel –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∫—Ç–æ —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω
    wb = load_workbook(file_path)
    sheet_name = f"Day {day + 1}"
    sheet = wb[sheet_name]

    # –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –≤ Excel
    recorded_users = {row[0] for row in sheet.iter_rows(min_row=2, values_only=True) if row[0]}

    for username, chat_id in user_chat_mapping.items():
        user_id = chat_id  # –ï—Å–ª–∏ chat_id —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç user_id
        if user_id in answered_users or user_id in recorded_users:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–æ–ø—Ä–æ—Å. –¢–∞–π–º–∞—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω.")
            continue

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª, —É–≤–µ–¥–æ–º–ª—è–µ–º –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        context.bot.send_message(chat_id=chat_id, text="‚è∞ –£–≤—ã, –≤—Ä–µ–º—è –≤—ã—à–ª–æ! –í–∞—à –æ—Ç–≤–µ—Ç –Ω–µ –±—ã–ª –∑–∞—Å—á–∏—Ç–∞–Ω.")
        response_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        record_user_response(user_id=user_id, username=username, day=day, response_time=response_time, result=False)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
    select_winners(context, day)




def select_winners(context, day):
    global notified_winners_global
    wb = load_workbook(file_path)
    sheet_name = f"Day {day + 1}"
    sheet = wb[sheet_name]

    # –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    correct_users = []
    for row in sheet.iter_rows(min_row=2, values_only=True):
        if row[3] == "–í–µ—Ä–Ω–æ":  # –ö–æ–ª–æ–Ω–∫–∞ "Correct Answer"
            correct_users.append(row)

    # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
    if len(correct_users) > 5:  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ 5
        winners = random.sample(correct_users, 5)  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ 5
    else:
        winners = correct_users

    # –¢–µ–∫—É—â–∏–π –ø—Ä–∏–∑
    prize_message = prizes[day] if day < len(prizes) else "üéÅ –ü—Ä–∏–∑ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –±—É–¥–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω –ø–æ–∑–∂–µ!"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º
    for winner in winners:
        user_id = winner[0]  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–µ—Ä–≤–æ–º —Å—Ç–æ–ª–±—Ü–µ
        if user_id not in notified_winners_global:
            context.bot.send_message(
                chat_id=user_id,
                text=f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤ —á–∏—Å–ª–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –¥–Ω—è! üèÜ‚ú® –°–≤—è–∂–∏—Ç–µ—Å—å —Å –≤–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞.\n\n{prize_message}"
            )
            notified_winners_global.add(user_id)  # –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫

    # –û—Å—Ç–∞–ª—å–Ω—ã–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Ç–µ—à–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    for user in correct_users:
        if user not in winners and user[0] not in notified_winners_global:
            user_id = user[0]
            context.bot.send_message(
                chat_id=user_id,
                text="–í–∞—à –æ—Ç–≤–µ—Ç –≤–µ—Ä–Ω—ã–π, –Ω–æ –≤ —ç—Ç–æ—Ç —Ä–∞–∑ —É–¥–∞—á–∞ –±—ã–ª–∞ –Ω–µ –Ω–∞ –≤–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞! üéØ"
            )
            notified_winners_global.add(user_id)


# Callback for participating in quiz
def participate_handler(update, context):
    query = update.callback_query
    query.answer()
    
    user = query.from_user
    chat_id = query.message.chat_id
    username = user.username if user.username else "Unknown"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ
    if username in quiz_participation:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        context.bot.send_message(
            chat_id=chat_id,
            text="–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ. –ñ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –∑–∞–≤—Ç—Ä–∞! üòä"
        )
        logging.warning(f"{datetime.now()} - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –ø—ã—Ç–∞–ª—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞–∂–∞—Ç—å '–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ'.")
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –µ–≥–æ —É—á–∞—Å—Ç–∏–µ
    quiz_participation[username] = {"participated": True, "timestamp": datetime.now()}
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ
    context.bot.send_message(
        chat_id=chat_id,
        text="üïí –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ! –û–∂–∏–¥–∞–π—Ç–µ, –≤–æ–ø—Ä–æ—Å –ø–æ—è–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É. –ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ! üéâ"
    )


# Function to send quiz question
# Function to send quiz question
def send_daily_quiz(context, day):
    logging.info(f"Preparing to send quiz for day {day + 1}")

    if day < len(quiz_questions):
        question = quiz_questions[day]

        if not user_chat_mapping:
            logging.warning("‚ö†Ô∏è No users registered for the quiz. Skipping.")
            return

        for username, chat_id in user_chat_mapping.items():
            add_quiz_question(context, question, chat_id, day)

        # Update current day
        next_day = (day + 1) % len(quiz_questions)
        context.dispatcher.bot_data['current_day'] = next_day

        # Log when the next question will be sent
        next_quiz_time = context.job_queue.jobs()[1].next_t.replace(tzinfo=None)
        logging.info(f"–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å (–¥–µ–Ω—å {next_day + 1}) –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {next_quiz_time}.")
    else:
        logging.error(f"Day {day + 1} is out of range for questions.")



# Function to notify users about the quiz
def notify_users_about_quiz(context):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ —Ç–æ–º, —á—Ç–æ –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É."""
    if not user_chat_mapping:
        logging.warning("‚ö†Ô∏è No users to notify about the quiz.")
        return

    for username, chat_id in user_chat_mapping.items():
        try:
            context.bot.send_message(
                chat_id=chat_id,
                text="üîî –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É! –ì–æ—Ç–æ–≤—å—Ç–µ—Å—å!"
            )
            logging.info(f"Sent notification to {username} (Chat ID: {chat_id})")
        except Exception as e:
            logging.error(f"Failed to notify user {username} (Chat ID: {chat_id}): {e}")




# Function to send quiz question to user
def add_quiz_question(context, quiz_question, chat_id, day):
    message = context.bot.send_poll(
        chat_id=chat_id,
        question=quiz_question.question,
        options=quiz_question.answers,
        type=Poll.QUIZ,
        correct_option_id=quiz_question.correct_answer_position,
        open_period=QUIZ_TIMEOUT_SECONDS,
        is_anonymous=False,
        explanation="–¢—ã –Ω–µ –≥–ª—É–ø—ã–π. –ü—Ä–æ—Å—Ç–æ —Ç–∞–∫ –±—ã–≤–∞–µ—Ç"
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–ø—Ä–æ—Å–∞
    context.bot_data.update({message.poll.id: {'chat_id': message.chat.id, 'day': day}})
    
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Ç–∞–π–º–∞—É—Ç
    context.job_queue.run_once(
        handle_poll_timeout,
        when=QUIZ_TIMEOUT_SECONDS,
        context={'poll_id': message.poll.id, 'day': day}
    )


# Poll answer handler
def poll_handler(update, context):
    poll_answer = update.poll_answer
    user_id = poll_answer.user.id
    poll_id = poll_answer.poll_id
    selected_option_id = poll_answer.option_ids[0]

    poll_data = context.bot_data.get(poll_id, {})
    day = poll_data.get('day', 0)
    question = quiz_questions[day]
    correct_option_id = question.correct_answer_position
    is_correct = (selected_option_id == correct_option_id)

    response_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    username = poll_answer.user.username if poll_answer.user.username else "Unknown"

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ poll_participants, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
    if poll_id not in poll_participants:
        poll_participants[poll_id] = set()
    poll_participants[poll_id].add(user_id)

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ç–∞–±–ª–∏—Ü—É
    record_user_response(user_id=user_id, username=username, day=day, response_time=response_time, result=is_correct)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if is_correct:
        context.bot.send_message(
            chat_id=user_id,
            text="–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤–∞—à –æ—Ç–≤–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π! üéâ –¢–µ–ø–µ—Ä—å –º—ã –ø–æ–¥–æ–∂–¥–µ–º, –ø–æ–∫–∞ –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∑–∞–≤–µ—Ä—à–∞—Ç –∏–≥—Ä—É. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –º—ã —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –≤—ã–±–µ—Ä–µ–º 20 –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π —Å—Ä–µ–¥–∏ —Ç–µ—Ö, –∫—Ç–æ –æ—Ç–≤–µ—Ç–∏–ª –≤–µ—Ä–Ω–æ. –£–¥–∞—á–∏!"
        )
    else:
        context.bot.send_message(
            chat_id=user_id,
            text="‚ùå –£–ø—Å, —ç—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç! –ù–æ –Ω–µ —Å–¥–∞–≤–∞–π—Ç–µ—Å—å! üéØ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ —Å–Ω–æ–≤–∞."
        )

# Check if user is authorized
def is_authorized_user(update):
    user = update.effective_user
    return user.username == SUPERADMIN_USERNAME or user.username in authorized_usernames

# Main function
def main():
    initialize_excel()

    TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
    if not TELEGRAM_TOKEN:
        logging.error("TELEGRAM_TOKEN is not set. Exiting.")
        return

    updater = Updater(TELEGRAM_TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start_command_handler))
    dp.add_handler(CommandHandler("list", list_handler))
    dp.add_handler(CallbackQueryHandler(participate_handler, pattern="participate"))
    dp.add_handler(PollAnswerHandler(poll_handler))

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
    dp.bot_data['current_day'] = 0  # –ù–∞—á–∏–Ω–∞–µ–º —Å 0-–≥–æ –¥–Ω—è

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞
    logging.info(f"Current server UTC time: {datetime.now(timezone.utc)}")

    # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á
    job_queue = updater.job_queue
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 5 –º–∏–Ω—É—Ç –¥–æ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    job_queue.run_daily(
        notify_users_about_quiz,
        time=dt_time(15, 18),  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ 14:55 –ø–æ UTC
    )
    logging.info("JobQueue task for quiz notifications added at 14:55 UTC.")

    # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∞–º–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    job_queue.run_daily(
        lambda context: send_daily_quiz(context, dp.bot_data['current_day']),
        time=dt_time(15, 19)  # –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –≤ 15:00 –ø–æ UTC
    )
    logging.info("JobQueue task for quiz scheduling added at 15:00 UTC.")
    updater.start_polling()
    logging.info("Bot started in polling mode")

if __name__ == "__main__":
    logging.basicConfig(format="%(asctime)s - %(levelname)s - %(message)s", level=logging.INFO)
    main()